(Время: 1 сек. Память: 16 Мб Сложность: 31%)
У Андрея есть младший брат Ванечка, который очень любит смотреть мультики. Ванечка вечно разбрасывал по дому и терял свои DVD с мультиками. Поэтому на день рождения Андрей подарил брату длинную полку для того, чтобы Ванечка ставил на нее свои диски. Чтобы на полке был порядок, Андрей просил Ванечку соблюдать простой порядок:

если на полке нет ни одного диска, то Ванечка просто ставит его;
если диск есть, то Ванечка ставит диск либо справа, либо слева от уже расставленных;
забирает диски он так же, то есть снимает только с правого или левого края.
И теперь Андрей хочет узнать, выполнил Ванечка его инструкции или нет.

Входные данные
В первой строке входного файла INPUT.TXT указано целое число N (1 ≤ N ≤ 10000) - количество операций, которые выполнил Ванечка. Далее в N строках находится информация об операциях. Каждая операция постановки диска на полку описывается парой чисел. Первое из них (1 или 2) показывает, что диск ставится с левого края или с правого края соответственно. Второе целое число (от 0 до 10000) обозначает номер диска. Операции снятия диска с полки описывается одним числом 3 или 4, обозначающим с левого и правого края полки соответственно снимается диск.

В начальный момент полка пуста. Гарантируется, что последовательность операций корректна, нет команд снятия диска с пустой полки.

Выходные данные
В выходной файл OUTPUT.TXT для каждой операции снятия диска с полки выведите его номер.

#include <iostream>
#include <deque>
#include <fstream>
 
using namespace std;
 
 
int main()
 
{
    ifstream fin("INPUT.TXT");
    ofstream fout("OUTPUT.TXT");
    int a;
    int b, c;
    deque<int> deq;
    fin >> a;
    while(a)
    {
        fin >> b;
        if (b < 3) {
            fin >> c;
            if (b == 1)
                deq.push_front(c);
            else deq.push_back(c);
        }
        else {
            if (b == 3) {
                c = deq.front();
                deq.pop_front();
            }
            else {
                c = deq.back();
                deq.pop_back();
            }
            fout << c << " ";
        }
        a--;
    }
    fout.close();
    fin.close();
    system("pause");
    return 0;
}
