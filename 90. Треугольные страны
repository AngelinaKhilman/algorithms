(Время: 1 сек. Память: 16 Мб Сложность: 37%)
Эта история происходила на одной плоской планете. С незапамятных времен на ней существовал город N, находящийся в точке xn,yn. Кроме этого, в разное время на этой же планете существовали страны, каждая из которых имела форму треугольника.

Теперь перед историками встала серьезная задача — по имеющимся у них данным о треугольных странах определить, в какие страны мог входить город N. Город мог входить в страну, если он находится строго внутри нее.

Входные данные
Первая строка входного файла содержит два числа: xn и yn — координаты города N. Вторая строка входного файла содержит количество k треугольных стран (1 ≤ k ≤ 1000). Последующие k строк каждая описывают одну треугольную страну. Описание треугольной страны состоит из шести целых чисел x1,y1,x2,y2,x3,y3, где (x1,y1), (x2,y2), (x3,y3) — координаты вершин этой страны.

Гарантируется, что все страны имеют ненулевую площадь. Все координаты не превосходят 10000 по абсолютной величине.

Выходные данные
В первой строке выходного файла выведите количество стран, в которые мог входить город N. Во второй строке выведите через пробел номера этих стран в возрастающем порядке. Страны нумеруются с единицы в том порядке, в каком они заданы во входном файле.


def square(x1, y1, x2, y2, x3, y3):
    return abs(1 / 2 * ((x1 - x3) * (y2 - y3) - (y1 - y3) * (x2 - x3)))
 
def main():
    input_file = open("input.txt", "r")
    output_file = open("output.txt", "w")
    line = input_file.readline().split()
    x, y = int(line[0]), int(line[1])
    line = input_file.readline().split()
    n = int(line[0])
    b = []
    for i in range(n):
        line = input_file.readline().split()
        x1, y1, x2, y2, x3, y3 = int(line[0]), int(line[1]), int(line[2]), int(line[3]), int(line[4]), int(line[5])
        s1 = square(x, y, x1, y1, x2, y2)
        s2 = square(x, y, x2, y2, x3, y3)
        s3 = square(x, y, x3, y3, x1, y1)
        s = square(x1, y1, x2, y2, x3, y3)
        if s == s1 + s2 + s3 and s1 != 0 and s2 != 0 and s3 != 0:
            b.append(i + 1)
    output_file.write(str(len(b)) + "\n")
    output_file.write(str(' '.join([str(x) for x in b])) + "\n")
 
 
 
if __name__ == "__main__":
    main()
