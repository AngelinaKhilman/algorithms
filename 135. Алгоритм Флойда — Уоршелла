(Время: 1 сек. Память: 16 Мб Сложность: 36%)
Полный ориентированный взвешенный граф задан матрицей смежности. Постройте матрицу кратчайших путей между его вершинами. Гарантируется, что в графе нет циклов отрицательного веса.

Входные данные
В первой строке входного файла INPUT.TXT записано единственное число N (1 ≤ N ≤ 100) - количество вершин графа. В следующих N строках по N чисел - матрица смежности графа (j-ое число в i-ой строке соответствует весу ребра из вершины i в вершину j). Все числа по модулю не превышают 100. На главной диагонали матрицы - всегда нули.

Выходные данные
В выходной файл OUTPUT.TXT выведите N строк по N чисел - матрицу кратчайших расстояний между парами вершин. j-ое число в i-ой строке должно быть равно весу кратчайшего пути из вершины i в вершину j.




def main():
    input_file = open("input.txt", "r")
    output_file = open("output.txt", "w")
    line = input_file.readline().split()
    n = int(line[0])

    w = []

    for i in range(n):
        a = []
        line = input_file.readline().split()
        for j in range(n):
            a.append(int(line[j]))
        w.append(a)
        print(a)

    for k in range(0, n):
        for i in range(0, n):
            for j in range(0, n):
                if w[i][k] < 10 ** 9 and w[k][j] < 10 ** 9:
                    w[i][j] = min(w[i][j], w[i][k] + w[k][j])



    for i in range(n):
        print(w[i])

    for i in range(n):
        output_file.write(str(' '.join([str(x) for x in w[i]])) + "\n")
    input_file.close()
    output_file.close()


if __name__ == "__main__":
    main()
