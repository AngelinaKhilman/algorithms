(Время: 1 сек. Память: 16 Мб Сложность: 28%)
Одним из интересных объектов, изучаемых в теории игр, являются так называемые антагонистические игры двух лиц. Такие игры характеризуются множеством X стратегий первого игрока, множеством Y стратегий второго игрока и функцией выигрыша K(x, y) (x из X, y из Y). Если множества стратегий X и Y конечны, то такую игру принято называть матричной, так как функцию выигрыша K в этом случае удобно задавать матрицей.

Рассмотрим матричную игру, в которой X = {1,…,n}, Y = {1,…,m}. Матрицу выигрышей обозначим символом K. Нижним значением игры назовем число maxi=1..nminj=1..m Kij . Верхним значением игры назовем число minj=1..mmaxi=1..n Kij. Отметим также, что игры, у которых нижнее и верхнее значение совпадают, называются играми с седловой точкой.

Задана матрица выигрышей K для некоторой матричной игры. Найдите ее верхнее и нижнее значение.

Входные данные
Первая строка входного файла INPUT.TXT содержит целые числа n и m (1 ≤ n,m ≤ 100). Далее следуют n строк по m чисел в каждой. j-ое число i-ой строки равно Kij . Все Kij по модулю не превосходят 1000.

Выходные данные
В выходной файл OUTPUT.TXT выведите нижнее и верхнее значение игры через пробел.







#include<bits/stdc++.h>

using namespace std;

const int INF = 1000000000;

int main() {
    int n, m, k, p;
    cin >> n;
    cin >> m;
    vector < vector <int > > v(n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++){
            cin >> k;
            v[i].push_back(k);
        }
    vector <int> v1;
    for (size_t i = 0; i < n; i++){
        int minm = 100000;
        for (size_t j = 0; j < m; j++)
            if (v[i][j] < minm)
                minm = v[i][j];
        v1.push_back(minm);
    }
    int maxm = -10000000;
    for (size_t i = 0; i < v1.size(); i++)
        if (v1[i] > maxm)
            maxm = v1[i];



    vector <int> v2;
    for (size_t i = 0; i < m; i++){
        int maxmm = -1000000;
        for (size_t j = 0; j < n; j++)
            if (v[j][i] > maxmm)
                maxmm = v[j][i];
        v2.push_back(maxmm);
    }
     int minmmm = 10000000;
     for (size_t i = 0; i < v2.size(); i++)
        if (v2[i] < minmmm)
            minmmm = v2[i];
    cout << maxm << " " << minmmm;
    return 0;
}
