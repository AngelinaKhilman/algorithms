(Время: 1 сек. Память: 16 Мб Сложность: 47%)
Дан ориентированный взвешенный граф. Для него вам необходимо найти кратчайшее расстояние от вершины S до вершины F.

Входные данные
В первой строке входного файла INPUT.TXT записаны три числа: N, S и F (1 ≤ N ≤ 100; 1 ≤ S, F ≤ N), где N - количество вершин графа. В следующих N строках записаны по N чисел - матрица смежности графа, где число в i-ой строке j-ом столбце соответствует ребру из i в j: -1 означает отсутствие ребра между вершинами, а любое неотрицательное целое число (от 0 до 100) - наличие ребра данного веса. На главной диагонали матрицы всегда записаны нули.

Выходные данные
В выходной файл OUTPUT.TXT необходимо вывести искомое расстояние или -1, если пути между указанными вершинами не существует.


import math
from cmath import sqrt
 
 
def main():
    input_file = open("input.txt", "r")
    output_file = open("output.txt", "w")
    line = input_file.readline().split()
    n,s,f = int(line[0]), int(line[1]), int(line[2])
    summ = 0
 
    a = []
    visited = []
    distances = []
    for i in range(n):
        line = input_file.readline().split()
        b = []
        for j in range(n):
            b.append(int(line[j]))
            if b[-1] == -1:
                b[-1] = pow(10, 9)
        a.append(b)
        print(a[i])
 
    for i in range(n):
        distances.append(pow(10, 9))
 
    for i in range(n):
        visited.append(0)
 
    distances[s-1] = 0
 
    for t in range(n):
 
        qwe = pow(10, 9)
        k = 0
 
        for i in range(n):
            if distances[i] < qwe and visited[i] < 1:
                qwe = distances[i]
                k = i
 
        if distances[k] == pow(10, 9):
            break
 
        print(k)
        visited[k] = 1
 
        for j in range(n):
            if a[k][j] + distances[k] < distances[j]:
                distances[j] = a[k][j] + distances[k]
 
    print(distances)
 
    if distances[f - 1] == 10 ** 9:
        distances[f - 1] = -1
 
 
   
 
 
 
    output_file.write(str(distances[f - 1]) + "\n")
    input_file.close()
    output_file.close()
 
if __name__ == "__main__":
    main()
