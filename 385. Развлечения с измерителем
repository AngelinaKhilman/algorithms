(Время: 1 сек. Память: 16 Мб Сложность: 28%)
Дима обнаружил у папы на столе специальный чертежный прибор, похожий на циркуль-измеритель. Измеритель отличается от обычного циркуля тем, что в обеих его ножках находятся иголки (у обычного циркуля в одной ножке находится иголка, а в другой – грифель).

Кроме измерителя Дима нашел на столе клетчатый лист бумаги, в углах некоторых клеток которого были нарисованы точки. Так как измеритель служит для измерения расстояний, то Дима решил измерить все попарные расстояния между всеми точками на листе бумаги.

Ваша задача - написать программу, которая по координатам точек определит, сколько различных расстояний встречается среди расстояний, которые измерил Дима.

Входные данные
Первая строка входного файла INPUT.TXT содержит число n – количество точек (2 ≤ n ≤ 50). Следующие n строк содержат по два целых числа – координаты точек. Координаты не превышают 104 по абсолютной величине.

Выходные данные
На первой строке выходного файла OUTPUT.TXT выведите k – количество различных расстояний, которые измерил Дима. Следующие k строк должны содержать по одному вещественному числу – сами расстояния. Расстояния должны быть выведены в возрастающем порядке. Каждое число должно быть выведено с точностью не менее чем 10-9.

import math
 
def main():
    input_file = open("input.txt", "r")
    output_file = open("output.txt", "w")
    line = input_file.readline().split()
    n = int(line[0])
    c, d = 0, 0
    arr = set()
    qqq = []
    for i in range(n):
        line = input_file.readline().split()
        qqq.append((int(line[0]), int(line[1])))
    for i in range(0, len(qqq)):
        for j in range(0, len(qqq)):
            if i != j:
                arr.add(math.hypot((qqq[i][0] - qqq[j][0]), (qqq[i][1] - qqq[j][1])))
    print(arr)
    mass = []
    for j in arr:
        mass.append(j)
    print(mass)
    mass.sort()
    output_file.write(str(len(arr)) + '\n')
    for j in range(len(mass)):
        output_file.write(str('%.10f' % mass[j]) + '\n')
    input_file.close()
    output_file.close()
 
 
if __name__ == "__main__":
    main()
