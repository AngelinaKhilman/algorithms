База террористов
(Время: 1 сек. Память: 16 Мб Сложность: 32%)
Спецслужбы получили информацию о том, что в труднодоступной части Муравийской пустыни расположена хорошо замаскированная база террористов. В руки спецслужб попал и план этой базы, которая с большой высоты выглядит как группа скальных обломков, весьма часто встречающихся среди Муравийских песков. Президент отдал приказ уничтожить базу крылатыми ракетами. Ваша задача - по карте пустыни, полученной со спутника и плану базы определить количество возможных положений базы террористов. Помните, что террористы могли привезти на территорию базы камни!

Входные данные
В первой cтроке файла INPUT.TXT записаны числа Nb и Mb (1 ≤ Nb, Mb ≤ 20). В следующих Nb строках записан план базы. Каждая из этих строк содержит по Mb символов "#" (ASCII 35 ) или "." (ASCII 46). Символ "#" обозначает фрагмент базы, а символ "." - песок. В следующей строке записаны числа Nd и Md (1 ≤ Nd, Md ≤ 100). И остаток файла содержит карту участка пустыни на котором, предположительно, находится база террористов - Nd строк по Md символов "#" или "." в каждой.

Выходные данные
Запишите в файл OUTPUT.TXT количество возможных положений базы террористов.












#include <bits/stdc++.h>

using namespace std;


int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    int n, m, k, l;
    cin >> n;
    cin >> m;
    vector <vector <char> > a(n, vector<char> (m));


    for (int i = 0; i < n; i++){
        for (int j = 0; j < m; j++){
            cin >> a[i][j];
        }
    }
    cin >> k;
    cin >> l;
    vector <vector <char> > c(k, vector<char> (l));
    for (int i = 0; i < k; i++){
        for (int j = 0; j < l; j++){
            cin >> c[i][j];
        }
    }
    int q = 0, w = 0, p = 0, o = 0, ans = 0;
    for (int i = 0; i < k - n + 1; i++){
        w = 0;
        for (int j = 0; j < l - m + 1; j++){
            bool flag = true;
            o = 0;
            for (int e = 0; e < n; e++){
                p = 0;
                for (int r = 0; r < m; r++){
                    if (a[e][r] == '#' && a[e][r] != c[q][w]){
                        flag = false;
                        break;
                    }
                    w += 1;
                    p += 1;
            }
                w = w - p;
                q += 1;
                o += 1;

                if (flag == false)
                    break;
            }
            q = q - o;
            if (flag == true)
                ans += 1;
            w += 1;
    }
        q += 1;
    }
    cout << ans;
    return 0;
}
