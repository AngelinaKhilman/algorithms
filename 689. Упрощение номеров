(Время: 1 сек. Память: 16 Мб Сложность: 26%)
Как, Вы не можете запомнить 6 или 7-значный номер телефона, появившийся на секунду на экране телевизора?! С помощью специальной методики, описываемой далее, Вы превратитесь в ходячий телефонный справочник!

Очевидно, что число 402 запомнить легче, чем число 110010010, а число 337377 запомнить легче, чем число 957472. Значит, нужно чтобы запоминаемое число, с одной стороны, содержало как можно меньше цифр, а с другой стороны, желательно, чтобы в числе было как можно больше повторяющихся цифр. В качестве критерия сложности запоминания примем сумму количества цифр в числе и количества различных цифр в числе. Запоминаемое число можно записать в другой системе счисления, возможно, тогда его окажется легче запомнить. Например, число 65535 в шестнадцатеричной системе исчисления выглядит как FFFF. Таким образом, нужно написать программу подбора основания системы счисления для минимизации критерия сложности. Основание системы счисления нужно выбирать в диапазоне от 2 до 36, тогда для представления числа можно использовать цифры 0-9 и английские буквы A-Z.

Входные данные
Входной файл INPUT.TXT содержит в первой строке целое число n (1 ≤ n ≤ 100). Далее следует n строк, каждая строка содержит целое число от 1 до 999999999.

Выходные данные
Выходной файл OUTPUT.TXT должен содержать n строк. Для каждого из n заданных чисел строка содержит: основание системы счисления (от 2 до 36), минимизирующее критерий сложности запоминания, и число в выбранной системе исчисления, разделенные одним пробелом. Если несколько оснований дают одинаковое значение критерия, то выбрать наименьшее среди них.

def cb(num, to_base = 10, from_base = 10):
    if isinstance(num, str):
        n = int(num, from_base)
    else:
        n = int(num)
    alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if n < to_base:
        return alphabet[n]
    else:
        return cb(n // to_base, to_base) + alphabet[n % to_base]
 
def zif(n):
    k = str(n)
    arr = list(k)
    if len(arr) == len(set(arr)):
        return False
    return True
import math
import random
def v2(r, z, A, B, sigma, ro, a):
    res = A * ((B / r) ** ro - math.exp(-0.0070975 * z * z)) * math.exp(sigma / (r - a))
    return res
 
def main():
    input_file = open("input.txt", "r")
    output_file = open("output.txt", "w")
    line = input_file.readline().split()
    n = int(line[0])
 
    for i in range(n):
        length = 10 ** 10
        lengthset = 10 ** 10
        line = input_file.readline().split()
        m = int(line[0])
        for j in range(2, 37):
            mb = cb(m, j, 10)
            mbl = list(mb)
            if len(mb) + len(set(mbl)) < length:
                ans1 = j
                ans2 = mb
                length = len(mb) + len(set(mbl))
 
 
 
        print(ans1, ans2)
        output_file.write(str(ans1) + " " + str(ans2) + "\n")
    print(cb(999999999, 2, 10))
 
 
    input_file.close()
    output_file.close()
 
 
if __name__ == "__main__":
    main()
