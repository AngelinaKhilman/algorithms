Головоломка
(Время: 1 сек. Память: 16 Мб Сложность: 35%)
Головоломка
Петя разгадывает головоломку, которая устроена следующим образом. Дана квадратная таблица размера N×N, в каждой клетке которой записана какая-нибудь английская буква. Кроме того, дан список ключевых слов. Пете нужно, взяв очередное ключевое слово, найти его в таблице. То есть найти в таблице все буквы этого слова, причем они должны быть расположены так, чтобы клетка, в которой расположена каждая последующая буква слова, была соседней с клеткой, в которой записана предыдущая буква (клетки называются соседними, если они имеют общую сторону — то есть соседствуют по вертикали или по горизонтали). Например, на рисунке показано, как может быть расположено в таблице слово olympiad.

Когда Петя находит слово, он вычеркивает его из таблицы. Использовать уже вычеркнутые буквы в других ключевых словах нельзя. После того, как найдены и вычеркнуты все ключевые слова, в таблице остаются еще несколько букв, из которых Петя должен составить слово, зашифрованное в головоломке.

Помогите Пете в решении этой головоломки, написав программу, которая по данной таблице и списку ключевых слов выпишет, из каких букв Петя должен сложить слово, то есть какие буквы останутся в таблице после вычеркивания ключевых слов.

Входные данные
Во входном файле INPUT.TXT записаны два числа N (1 ≤ N ≤ 10) и M (0 ≤ M ≤ 100). Следующие N строк по N заглавных английских букв описывают ребус. Следующие M строк содержат слова. Слова состоят только из заглавных английских букв, каждое слово имеет длину от 1 до 100 символов. Гарантируется, что в таблице можно найти и вычеркнуть по описанным выше правилам все ключевые слова.

Выходные данные
В выходной файл OUTPUT.TXT выведите в алфавитном порядке оставшиеся в таблице буквы.


#include <bits/stdc++.h>

using namespace std;

int main() {
	freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    int n, m;
    cin >> n;
    cin >> m;
    vector <char> result;
    vector <string> v(n);
    vector <string> v2(m);
    vector <vector <int> > used(n, vector<int> (n));
    for (int i = 0; i < n; i++){
            cin >> v[i];
    }
    for (int i = 0; i < m; i++){
        cin >> v2[i];
    }
    for (int i = 0; i < m; i++){
        for (int j = 0; j < v2[i].length(); j++){
            bool flag = false;
            for (int k = 0; k < n; k++){
                for (int t = 0; t < n; t++){
                    if (v2[i][j] == v[k][t] && used[k][t] == 0){
                        used[k][t] = 1;
                        flag = true;
                        break;
                    }
                }
                if (flag == true)
                    break;
            }
        }
    }

    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++){
            if (used[i][j] == 0)
                result.push_back(v[i][j]);
        }
    }
    sort(result.begin(), result.end());
    for (int i = 0; i < result.size(); i++){
        cout << result[i];
    }
  return 0;
}
