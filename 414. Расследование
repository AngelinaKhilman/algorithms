Расследование
(Время: 0,5 сек. Память: 16 Мб Сложность: 40%)
В городском управлении милиции одного прибрежного города ведется расследование крупного дела, в котором могут быть замешаны сотрудники милиции. Было принято решение о тайной установке оборудования для просмотра информации, поступающей через Интернет. Под подозрение попадают два отдела, но добиться выделения денег на покупку двух комплектов оборудования не удалось. К счастью, внутренняя сеть управления имеет древовидную структуру, то есть каждый отдел имеет выход в Интернет через какой-либо другой отдел. Исключение составляет отдел по борьбе с компьютерными преступлениями, который имеет непосредственный доступ в Интернет по модемной линии.

Можно было бы установить оборудование для слежения прямо в этом отделе, но для предотвращения злоупотреблений лучше найти такое расположение, чтобы нарушалась секретность как можно меньшего количества лишних отделов.

Как наиболее опытному в подобных вопросах сотруднику, решение этой задачи поручили вам. Подчиненные уже пронумеровали все отделы натуральными числами, начиная с 1, первый номер присвоен отделу по борьбе с компьютерными преступлениями.

Входные данные
Первая строка входного файла INPUT.TXT содержит натуральное число N (N ≤ 30000) – количество отделов. Во второй строке записаны номера двух отделов, за которыми необходимо установить слежение. На третьей строке находятся n-1 натуральных чисел, i-е из них не больше i и задает номер отдела, к которому подсоединен отдел i + 1.

Выходные данные
В выходной файл OUTPUT.TXT выведите одно число – номер отдела, в котором следует установить следящее оборудование.







#include <bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
typedef long double ld;
 
int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    int a, b;
    cin >> a;
    cin >> b;
    vector <int> v;
    vector <int> v1;
    vector <int> v2;
    v.push_back(1);
    v.push_back(1);
    int k;
    for (int i = 1; i < n; i++){
        cin >> k;
        v.push_back(k);
    }
    int x = a;
    v1.push_back(x);
    int y = b;
    v2.push_back(y);
 
    while (x != 1){
        x = v[x];
        v1.push_back(x);
    }
 
    while (y != 1){
        y = v[y];
        v2.push_back(y);
    }
 
    x = a;
    y = b;
 
    while (x != y){
        if (v2.size() > v1.size())
        {
            v2.erase(v2.begin());
        }
 
        else
            v1.erase(v1.begin());
 
        x = v1[0];
        y = v2[0];
    }
    cout << x << endl;
 
 
    return 0;
}
