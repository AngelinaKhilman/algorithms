Трубы
(Время: 1 сек. Память: 16 Мб Сложность: 29%)
Для поддержания температуры и чистоты воды в бассейн постоянно наливают новую воду и выливают старую. Иногда это происходит одновременно. Сотрудники бассейна составили план налива/слива воды. В плане перечислены напор слива/налива воды и интервал времени, в которое он будет происходить. Вода может выливаться (а также наливаться) одновременно из нескольких труб. Необходимо узнать объем воды в бассейне через заданное время T . Стоит заметить, что вода не может выливаться из пустого бассейна.

Входные данные
В первой строке входного файла INPUT.TXT записано целое число N – количество записей в плане (1 ≤ N	≤ 1000). Далее следует N строк, содержащих по три целых числа li, ri и vi – начало работы трубы, конец работы трубы и напор, с которой вода поступает в бассейн (объем воды, поступающий в бассейн за единицу времени). Если напор отрицателен, то вода вытекает из бассейна (0 ≤ li, ri, |vi| ≤ 1000, li ≤ ri). В последней строке записано целое число T – время, через которое необходимо определить объем воды в бассейне (0 ≤ T ≤ 10000).

Выходные данные
В выходной файл OUTPUT.TXT выведите ответ на задачу – объем воды в бассейне через время T, если изначально бассейн пуст.








#include <bits/stdc++.h>

using namespace std;

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    int n, t;
    cin >> n;
    vector <int> a(n);
    vector <int> b(n);
    vector <int> c(n);
    int x;

    for (int i = 0; i < n; i++){
        cin >> a[i];
        cin >> b[i];
        cin >> c[i];
    }
    for( int i = 0; i < n; i++) {
    for( int j = n - 1; j > i; j-- ) {
      if ( c[j-1] < c[j] ) {
        x = c[j - 1];
        c[j - 1] = c[j];
        c[j] = x;
        x = a[j - 1];
        a[j - 1] = a[j];
        a[j] = x;
        x = b[j - 1];
        b[j - 1] = b[j];
        b[j] = x;
        }
    }
    }
    cin >> t;
    int sum = 0;
    int sumo = 0;
    for (int i = 0; i <= t; i++){
        for (int j = 0; j < n; j++){
            if (i > a[j] && i <= b[j]){
                    if (sum + c[j] <= 0)
                        sum = 0;
                    else
                        sum += c[j];
            }
        }
    }
    cout << sum;



    return 0;
}
