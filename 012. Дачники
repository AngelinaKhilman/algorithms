(Время: 1 сек. Память: 16 Мб Сложность: 45%)
Всем известно, что дачники – народ странный, почти такой же, как и программисты. Строят они свои дачи непонятно где, да и выращивают там непонятно что и непонятно зачем. А уж как они туда добираются, это другая история: кто на автобусе, кто на электричке, кто на автомобиле, ну а кто-то вовсе пешком ходит от дома и до самого участка. Так что не стоит удивляться, если вдруг Вы узнаете, что некое садоводческое товарищество располагается на острове, а дачники добираются до него самолетом. Да еще и на этом острове может не быть посадочной полосы, так что высадиться на остров можно, только прыгая с парашютом (мы уж не рассматриваем то, как они возвращаются с дач домой). Рассмотрим этот уникальный случай. Пилот всегда старается осуществить высадку парашютистов таким образом, чтобы дачники приземлялись как можно ближе к своим прямоугольным участкам. Пилоту интересно знать: сколько дачников приземлится на свои участки? Помогите ему решить эту задачу!

Входные данные
В первой строке входного файла INPUT.TXT записано натуральное число N (1 ≤ N ≤ 1000) – количество дачников, далее идут N строк, в каждой из которых описаны координаты каждого дачника и его участка:
X Y X1 Y1 X2 Y2 X3 Y3 X4 Y4
где
(X,Y) – координаты приземления парашютиста
(X1, Y1, X2, Y2, X3, Y3, X4,Y4) – координаты прямоугольного участка на плоскости, указанные последовательно.
Все координаты – целые числа, не превышающие 50000 по абсолютной величине

Выходные данные
В выходной файл OUTPUT.TXT нужно вывести количество дачников, приземлившихся на свой участок. Попадание на границу участка считается попаданием на участок.


#include <bits/stdc++.h>
 
using namespace std;   
 
typedef long long ll;
typedef long double ld;
 
ld triSquare(ld x1, ld y1, ld x2, ld y2, ld x3, ld y3) {                              
    ld ans = (x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3);
    return abs(ans) / 2.;
}
 
int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);      
    int n;
    cin >> n;
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        ld x, y, x1, y1, x2, y2, x3, y3, x4, y4;
        cin >> x >> y >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;
        ld s = triSquare(x1, y1, x2, y2, x3, y3) + triSquare(x3, y3, x4, y4, x1, y1);
        ld s2 = triSquare(x1, y1, x2, y2, x, y) + triSquare(x2, y2, x3, y3, x, y) + triSquare(x3, y3, x4, y4, x, y) + triSquare(x4, y4, x1, y1, x, y);
        cerr << s << " " << s2 << endl;
    if (abs(s - s2) < 1e-9) ++ans;
    }
    cout << ans << endl;
    return 0;
}
